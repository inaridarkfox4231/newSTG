仕様書
キャンバスサイズは480x640（縦長）
自機は画面中央下方
十字キーで操作する（もしくはコントローラで）
弾をかわすだけ
当たり判定はすべて円
オブジェクトの形はいろいろにするかもしれないけど
いろんな弾幕パターン
それを一定時間（15秒位を想定）かわし続ける
各ステージ当たっていいのは5回まで
成功すると上の方がゲート開くのでそこを通ってスクロールして次の・・みたいな。？
やめよ。
画面が全体的に白くなっていって（シェーダで全体的に明るくしていく処理）
---
   この処理について
   毎フレーム画像を渡す
   各ピクセルに対しそれと1.0とのラープ
   時間経過に従ってラープでの1.0の割合を大きくしていく
   これによりフェードイン、フェードアウトを表現できる
---
その逆の処理をステージ開始時に行う（それぞれ1秒位でささっと）
処理中は弾幕が発生しない
弾幕がなくなってから処理開始、処理が終わってから弾幕発生、カウント開始って感じね。
で、
まあ、初めてだし、それ以上複雑なことは出来ません。無理。
テンプレの意味がなくなってしまう、
今思うとブロック崩しはやりすぎた
もっといろいろ作るつもりだったのにめちゃ凝ったものいきなり作っちゃったせいでSTGに到達できなくなってしまった
同じようなことにならないようにしたい

ミニマムな移植って難しいのよね・・まるごとコピペ出来たらどんなにいいか。

線が出現する前に薄い線。そのあと実線。消えるときは普通に消える、でいい。ちょっとめんどくさくなってきた。。
クラスを2つ。

やめた。
直接放り込んじゃおう。
で、プレイヤー以外のすべてのユニットが無くなったらクリア判定。
結局あれ複雑なコードだけど基本的にはプレイヤーの操作は十字キーで動かして敵倒すだけだし
単純だからね。いけるんじゃないかと。多分だけど。
中身はいじる。その、グラフィックを渡してそこに描画させる。で、ポーズの場合はそれを受け取ってすべて止めてグレーでカバーする感じ。
ゲームオーバーは文字表示するだけですかね・・あとはRETRYかTO TITLEを選ばせる。十字キーで。そういうのはあとでいいから。
サイズは800x640で中央の480x640に面を表示、両サイドの160x480で何かする。。まあ背景とかでいいや。

PlaySceneの中のSystemを現在使ってるmySystemで。んで、結果を受け取って状態遷移。

2021/09/17/AM2:34
とりあえず移植には成功
タイトルいじっておこうかな・・仮タイトルでもつける？
クリックで次の画面に移行するときちょっと時間かかるといいかもね（即座にページ遷移するよりかは）
あとスタート時になんかする？
ポーズ作らないと
背景を事前に用意したものでやるには・・
パターンの作り方もうちょっと工夫すべきか・・いろいろ考えることがあるのです。
すぐには完成しないと思う

2021/09/18/AM0:49です
2021/09/19/AM10:35です
もっときちんとリプできるようになりたいね。反省します。
手始めにもう出来てるステージの雑な移植でも・・その前にクリックでステージ選択できるようにしますね。
パターン3つくらい移植して、そのうえで、選べるようにしましょう。
一列3つくらいでスクロールで下の方が出てくる感じ（エリア内でホイールドラッグでうえしたみたいなイメージ、難しくないはず）
最終的にはサムネ用意して
まあでも6つくらいできればいいよね
とりあえず3つ
40,120,40,120,40,120,40の間隔で。あんま狭すぎるとあれなので。

さてUIですが
分けた方がいいよね
直書きしちゃうと柔軟性がね・・・で、一応ボタン扱いなので、
ボタンをクラスに。ボタンセットもクラスに。
ボタンセットがマウス位置に反応して、さらにその中で各ボタンがマウス位置に反応してたとえば暗い色が明るくなったりする、
それを描画するのがボタンセットの仕事。役割分担で。切り離せるように。
ボタンが要らないゲームもあるので・・・・

さっきの失敗はgetSceneの方でもう""を受け取った場合の処理は書いてあるから云々ってことだと思う。

定数をスクリプトにまとめるとか
まとめました。えらい！
つぶプロ書いてないで早く進めてください・・いい加減にして。。
あの・・800x80やってる場合じゃないんですが・・・・！

というわけでボタン出来ました。
押すときになんかほしいね・・効果音と、あとボタンがブリンク・・するとか・・
クラスのextendsでそういう感じにしたらいいかも。ていうかexpandもまあ、んー。いいや。
十字キーにするならステージ番号のデフォは0にしてinputXとYをカーソル位置から割り出してそれが移動するようにすればOK.

どうでもいいけどさ。
これ使って以前作ったつぶプロギャラリー書き直したり・・んー、でもあれはp5の勉強にちょうどよかったし。どうするかな。
弾幕ギャラリーならいいんじゃない？つぶプロ弾幕ギャラリー的な（？）

ボタン
種類を作る
画像はデフォで持たせて選択されてない場合は透明度でカバーする感じ
動きについてはいくつか
マウスが乗った時の処理
乗ると大きくなる
乗ると跳ねるアニメ
いいや。今こだわるところじゃない。
選ぶとタイトルの背景が変わってそのままステージに移行するとかいいね。
ボタンとテキストがパーティクルになって消える感じ。（プレイ側で行う）
最終的にはマウスじゃなくて十字キーで操作するので-1という状態は最終的に廃止ですだから選択している間常にあれですねOK.
背景何でもいいよ

まず今現在bgがどうなっているかというと、bgColorというのを設定してその色単色になりますね。
ここをbg用のグラフィックを別に用意してそれを置くように書き換えます。これが第一段階。createBackgroundで。
単色にしてもべったり、グラデーション、その色の三角形を敷き詰めるなどいろいろあるので。その色の薄いのや濃いのをいろいろ、とか。
あんま遊びすぎると背景が主張気味になるので・・んー。めんどうだな。
もしくは背景に星っぽい何かや三角形っぽい何かが一定速度で落ちていくとか。全部一定速度であることによって
上に向かっているように見える。
もしくはこっちで用意した写真をおくのもありで。その場合はpreloadで読み込んでsystemに渡して・・
こっちで先に・・
背景が動く場合はもう別クラスにしてsystemにアップデートandドローさせる感じですかね

というわけで
それが、何？

2021/09/21/tue
はい。戻ってきましたー。normal関数は使いどころがわからん。もういい。
ボタンどうする？
画像を用意する。それに対してグレーにするのは上からなんかかぶせるでいい。
だいたいfill(0,64);くらいで暗い感じになるので。そんな感じで。
画像はロードしてボタンに渡す。

次に背景はあらかじめ用意してロードしてsystemに渡して設定でbgId:0とか1とか。判定は次の通り。
bgColorがある場合はその色べったりで。bgGradのデフォは"noGrad"で、"towhite"なら下に向かって白、"toblack"なら下に向かって黒くする。
bgIdのデフォは-1.実は最初にbgIdを見てここが-1ならbgColorに移り判断する感じ。その中でbgGradについて参照するのでbgIdが0以上なら
bgGradは無視される感じ・・にしたいところだけどやろうと思えばできるのよね。与えられた背景に対してピクセル処理で白や黒に向かう処理が
できるので。ただそれはあらかじめやっておくべき。だからやらない。無視。で、bgIdが0以上の場合はこれに基づいてロードした背景をセット。
というかタイトルにも紐付けておいてタイトルの背景が変わる。
さて問題です。
タイトルの背景が変わるということは背景作成の処理を2箇所に書かなければいけないということ・・同じ処理を2回やるのかという話。
せめて背景作成部分だけでもまとめるべき。ということはsystem内のグローバル関数（getBackground）にすべきなのかな・・
つまりタイトルの背景・・
というわけで単純なグラデーションとかそういうの全部廃止してアセットに統一しましょう。つまりbgColorは廃止で、bgIdのみで、
グローバル配列にpreload経由でぶちこんだものをGameからplay,playからsystemに渡して。titleにも渡す。で、idに応じてtitleの背景が変わる感じ。
選択したらそのままplayに移行する。その際にパーティクル出してUIを消す。そこまでとりあえず。
背景どうするって・・とりあえず写真とかグラデーションとか適当でいいよ単色でもいいし。
ボタン？は、まあ、色付けて。。ボタンっぽく。いつものやつ。
めんどくさいな・・長方形に数字でいいよもう・・おわんないよ・・

背景できました。がんばった。十字キーでステージ選択。増やすかもだけど。上下？そうね。まだちょっとね。
