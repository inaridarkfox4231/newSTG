弾幕言語、というかいろいろ書き直したい感じ。
まず描画は画像貼り付けと回転を駆使する感じで・・
なので色で分けたりとかはしない感じ。
そもそもそういうのあれするならそういう画像を用意すればいいだけのことだし。
だからCrossReferenceArrayの拡張もいらない。あれ分かりづらくて使いたくなかったので。

Unitの改善とCommandの導入について
今日考えたことをざっくりと。えーと。
まあ、要するに、煩雑すぎるので何とかしたいわけ。
今の言語使用ができたのは2019年の12月の下旬くらい。そこからいじってない。
それを何とかしたかったんだけどできないままここまで来てしまった。
ifの乱立とかそこら辺も不満だし。いろいろとね・・でもできることはできてたから放置してきたんだけど。
さすがにちょっとそろそろいじりたい、というかもう全部書き直してもいいくらいって思ってる。
衝突判定云々は別扱いとしてね。

えーと。
まあ、今のままでもいいんだけどもうちょっと分かりやすくしたいというか・・
値の設定のところ。
パターン1:然るべき値を然るべきプロパティに据えておしまい
パターン2:然るべき値になるように時間をかけて近づけていく。
ところがaddとかいう足し算で近づいていくやつとか、
aimとかいう方向を設定するのに付加情報が要るやつとか（fromParentなんてのもある）あるから質が悪い。
そういうのは個別にそういうのを作ればいいと思うよ・・関数を作って放り込むとか。
aim:()=>{...}的な？
値を設定するコマンドの派生クラスをいくつか用意しておいてそれを呼び出して当てはめるようにすれば
記述が簡略化されてハッピーになれるわけ。
それらを含めて、ifを排除して全部クラスにしちゃおう、クラスを生成して当てはめるだけ、各ユニットはクラスの内容を実行するだけ、
面倒なif文の羅列から解放されよう、っていうのがいわゆる「クラス計画」ってあったんだけど、頓挫した・・
でもその方が絶対わかりやすい。
ハードルは？パーサーの大幅な書き換え・・

加えて提案。

各ユニットに「親が死んだときのaction」の枠と「自分が死んだときのaction」の枠を設けたい。
基本的にこれらは両立しないが両方満たされた場合は親が死んだときのactionは無いものとみなす。
つまり「自分は生きてて親が死んでるときのaction」ね。
自分は生きてて親が死んだ場合はactionを乗り換えてそっちをメインに据える感じね。
親が死んだら、そのユニットは「親が死んだときのふるまいがempty」でない限りゴーストとして扱われる。
ゴーストとは当たり判定のないユニットで、ゴーストはアクションを一通り終えると戻らずに自滅する。その間点滅させてもいい。
というかそういうコードを書いて実装するんだけどね。（消えなかったらバグですね・・）
その、たとえばやられると弾を発射して消える場合とか、
今の仕組みだとそういうユニットをヒドゥンで出さないといけなくって煩雑になっちゃってるわけ。
あと親が死ぬまでずっとなんかさせるっていうのができないのよ・・ぐるぐるまわるだけとかしか。それじゃあね・・
それでちょっと汚いコードになっちゃってるから何とかしたいってわけさ。
他にも応用は広くて、中ボスに倒れた後で続きのステージを構成するユニットを吐き出させるとかできるわけ。
deathActionかなぁ。ノードの場合は。で、発射する側にはshotDeathActionですかね・・もちろんshotActionも。
shotDeathActionの入れ子にすることで中ボス3体とか4体とかできるはずなので。

フラグの設定系（hideとか）もsetでまとめて記述できるね・・bindとか。bindは親が死んだら死ぬとかそういうの

commandに求められる仕様：
actionIndexを増やしたりするその辺
カウンターを見てtrueとかfalseを返すなど（continueFlag的なやつ）
ループどうしようね
いくつインデックス戻すかってのを配列から調べる仕様をそのまま実装すればいい

ループカウンター・・
これ実装するの大変だった。
一定の範囲を何度も往復して一定数終わったら次に向かう仕様を作りたくて、
でもその周回数ってユニットが覚えていないといけなくってね。
それを実現しないといろいろと面倒なので・・大変だったわ。
命令側でこれやっちゃうと内容が書き変わっちゃうでしょ、それだと大変なのでね・・
しかしあれだね。これ・・整数で制御できないか？
たとえばだけど、0,1,2,[3,4,5]x30,6,7,8みたいなときに、
これを0,1,2,[3,4,5,6,7,8,...,90,91,92],93,94,95にするとか。で、
0～95を0,1,...,8に落とす整数から整数への配列を用意すれば、
それを使って各コマンドにアクセスできる。複雑な計算は不要で、配列があればOK.
いけるかな・・ループカウンター使いたくないのよね。はっきり言って。
これをアクションクラス（コマンド配列を持ったあれ）に付随させる感じ。やってみるか。
wait:8
これは8フレームの間何もしない
結局カウンターって1つあればよくてね
そして厳密にきちんと考えれば難しくないよね
んー・・
loop:INFのback:途中ってどうするんだろ。あー、まあ、末尾をそこにおけばいい、か。
0,1,2,[3,4,5]xINFの場合。
0,1,2,3,4,5で、インデックスが超えてしまった場合の値の設定を3にする。
これが-1なら繰り返しはなく命令終了って感じで。それでいける。
つまりインデックスが末尾を超えた場合の処理をアクション側に用意しておけばいいわけね
あ、シグナル分岐とかあるんだっけか・・んー。
シグナル分岐はどっちいくかわかんないから困るのよね。さて困ったね。
あーsignalってそのコマンドを抜けない・・ということは他にできることがないのね・・柔軟性が弱い。
こういうのって別のアクションを用意すべきじゃないの？別のアクションに・・
サブアクション的な。で、その頭にこれが付いてて、条件を満たしたらそれまでのアクションを捨ててそっちに乗り換えるとか。
それだと
まあいいか別に
グラウンドレイドかっこいいし（そこかよ）

問題はほかにもあって、パースをどうするか。

サブアクション・・んー。
たとえばHPが一定以下になったらアクションを切り替えて、とか。ボスの攻撃パターンを増やすのに使ったりする。
もしくはステージ構成で最後に出したユニットが死んだら、とか。中ボスの仕様。
親は1つだけってなってるけど子に関しても、最後に出した子への参照だけなら用意してもいいと思うのよね。
それを実装すれば、中ボスが死んだら次のステージ開始、ってできるでしょ、その、「ステージを作るユニット」が。
サブアクションをいくつか・・いわゆるwave的な。中ボスも作れるし攻撃パターン・・んー。
ランダムでいくつかの攻撃パターンのどれかにジャンプしても面白そうね・・（え？）
いやそれだとインデックス・・・んー。

もとより複数のアクションを格納することを想定して作る？で、頭に発動条件を用意しておいて、末尾に行った時のあれをコマンドで・・
同じアクションを最初からやり直すのか、
ランダムで条件を満たすいくつかのアクションのどれかに飛ぶのか。
HPが減ったら減ったでそのようないくつかのアクションのどれかにとぶのか
actionArray:[0,1,2,3,4,5]
通常：0か1をやる、HPが2/3以下：2か3をやる、HPが1/4以下：4か5をやる？
加えてdeathActionもよういしておいてHPが0になったあともゴースト状態で最後っ屁

戻った？？？？戻った！
クソ仕様が。

えーと。自前のスプライト？を。作る？弾幕でQiita？いろんな人がやってるけど・・

1. unitの特徴を押さえたうえで大量にプールに作る（ユニットプール！）。
2. unitの属性をいろいろ用意する。
3. ノードユニットを用意・・んぁー
