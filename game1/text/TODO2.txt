弾幕言語、というかいろいろ書き直したい感じ。
まず描画は画像貼り付けと回転を駆使する感じで・・
なので色で分けたりとかはしない感じ。
そもそもそういうのあれするならそういう画像を用意すればいいだけのことだし。
だからCrossReferenceArrayの拡張もいらない。あれ分かりづらくて使いたくなかったので。

Unitの改善とCommandの導入について
今日考えたことをざっくりと。えーと。
まあ、要するに、煩雑すぎるので何とかしたいわけ。
今の言語使用ができたのは2019年の12月の下旬くらい。そこからいじってない。
それを何とかしたかったんだけどできないままここまで来てしまった。
ifの乱立とかそこら辺も不満だし。いろいろとね・・でもできることはできてたから放置してきたんだけど。
さすがにちょっとそろそろいじりたい、というかもう全部書き直してもいいくらいって思ってる。
衝突判定云々は別扱いとしてね。

えーと。
まあ、今のままでもいいんだけどもうちょっと分かりやすくしたいというか・・
値の設定のところ。
パターン1:然るべき値を然るべきプロパティに据えておしまい
パターン2:然るべき値になるように時間をかけて近づけていく。
ところがaddとかいう足し算で近づいていくやつとか、
aimとかいう方向を設定するのに付加情報が要るやつとか（fromParentなんてのもある）あるから質が悪い。
そういうのは個別にそういうのを作ればいいと思うよ・・関数を作って放り込むとか。
aim:()=>{...}的な？
値を設定するコマンドの派生クラスをいくつか用意しておいてそれを呼び出して当てはめるようにすれば
記述が簡略化されてハッピーになれるわけ。
それらを含めて、ifを排除して全部クラスにしちゃおう、クラスを生成して当てはめるだけ、各ユニットはクラスの内容を実行するだけ、
面倒なif文の羅列から解放されよう、っていうのがいわゆる「クラス計画」ってあったんだけど、頓挫した・・
でもその方が絶対わかりやすい。
ハードルは？パーサーの大幅な書き換え・・

加えて提案。
各ユニットに「親が死んだときのaction」の枠と「自分が死んだときのaction」の枠を設けたい。
基本的にこれらは両立しないが両方満たされた場合は親が死んだときのactionは無いものとみなす。
つまり「自分は生きてて親が死んでるときのaction」ね。
自分は生きてて親が死んだ場合はactionを乗り換えてそっちをメインに据える感じね。
親が死んだら、そのユニットは「親が死んだときのふるまいがempty」でない限りゴーストとして扱われる。
ゴーストとは当たり判定のないユニットで、ゴーストはアクションを一通り終えると戻らずに自滅する。その間点滅させてもいい。
というかそういうコードを書いて実装するんだけどね。（消えなかったらバグですね・・）
その、たとえばやられると弾を発射して消える場合とか、
今の仕組みだとそういうユニットをヒドゥンで出さないといけなくって煩雑になっちゃってるわけ。
あと親が死ぬまでずっとなんかさせるっていうのができないのよ・・ぐるぐるまわるだけとかしか。それじゃあね・・
それでちょっと汚いコードになっちゃってるから何とかしたいってわけさ。
他にも応用は広くて、中ボスに倒れた後で続きのステージを構成するユニットを吐き出させるとかできるわけ。
deathActionかなぁ。ノードの場合は。で、発射する側にはshotDeathActionですかね・・もちろんshotActionも。
shotDeathActionの入れ子にすることで中ボス3体とか4体とかできるはずなので。
